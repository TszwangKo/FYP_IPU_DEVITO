// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto

#ifndef PROTOBUF_image_2eproto__INCLUDED
#define PROTOBUF_image_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace denoise {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_image_2eproto();
void protobuf_AssignDesc_image_2eproto();
void protobuf_ShutdownFile_image_2eproto();

class Image;

// ===================================================================

class Image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:denoise.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  void UnsafeArenaSwap(Image* other);
  void Swap(Image* other);

  // implements Message ----------------------------------------------

  inline Image* New() const { return New(NULL); }

  Image* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Image* other);
  protected:
  explicit Image(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 shape = 1;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  ::google::protobuf::int32 shape(int index) const;
  void set_shape(int index, ::google::protobuf::int32 value);
  void add_shape(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shape() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shape();

  // optional bytes values = 2;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  const ::std::string& values() const;
  void set_values(const ::std::string& value);
  void set_values(const char* value);
  void set_values(const void* value, size_t size);
  ::std::string* mutable_values();
  ::std::string* release_values();
  void set_allocated_values(::std::string* values);
  ::std::string* unsafe_arena_release_values();
  void unsafe_arena_set_allocated_values(
      ::std::string* values);

  // @@protoc_insertion_point(class_scope:denoise.Image)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shape_;
  mutable int _shape_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr values_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_image_2eproto();
  friend void protobuf_AssignDesc_image_2eproto();
  friend void protobuf_ShutdownFile_image_2eproto();

  void InitAsDefaultInstance();
  static Image* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Image

// repeated int32 shape = 1;
inline int Image::shape_size() const {
  return shape_.size();
}
inline void Image::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int32 Image::shape(int index) const {
  // @@protoc_insertion_point(field_get:denoise.Image.shape)
  return shape_.Get(index);
}
inline void Image::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:denoise.Image.shape)
}
inline void Image::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:denoise.Image.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Image::shape() const {
  // @@protoc_insertion_point(field_list:denoise.Image.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Image::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:denoise.Image.shape)
  return &shape_;
}

// optional bytes values = 2;
inline void Image::clear_values() {
  values_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Image::values() const {
  // @@protoc_insertion_point(field_get:denoise.Image.values)
  return values_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_values(const ::std::string& value) {
  
  values_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:denoise.Image.values)
}
inline void Image::set_values(const char* value) {
  
  values_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:denoise.Image.values)
}
inline void Image::set_values(const void* value,
    size_t size) {
  
  values_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:denoise.Image.values)
}
inline ::std::string* Image::mutable_values() {
  
  // @@protoc_insertion_point(field_mutable:denoise.Image.values)
  return values_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Image::release_values() {
  // @@protoc_insertion_point(field_release:denoise.Image.values)
  
  return values_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Image::unsafe_arena_release_values() {
  // @@protoc_insertion_point(field_unsafe_arena_release:denoise.Image.values)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return values_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Image::set_allocated_values(::std::string* values) {
  if (values != NULL) {
    
  } else {
    
  }
  values_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), values,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:denoise.Image.values)
}
inline void Image::unsafe_arena_set_allocated_values(
    ::std::string* values) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (values != NULL) {
    
  } else {
    
  }
  values_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      values, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:denoise.Image.values)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace denoise

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_image_2eproto__INCLUDED
